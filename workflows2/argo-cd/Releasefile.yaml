# Exported from:        http://release-staging.devops.dev.digitalai.cloud/
# Release version:      24.1.0-beta.5
# Date created:         Fri Feb 16 11:38:24 GMT 2024

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: Users/Hes/Workflows/ArgoCD
spec:
- name: Digital.ai Official - Fork
  type: git.Repository
  url: https://github.com/Hes-Siemelink/release-content
  password: !value "git_Repository_Digital_ai_Official___Fork_password"
- template: Delete Application in ArgoCD
  scheduledStartDate: 2023-04-27T13:00:00Z
  dueDate: 2023-04-27T14:00:00Z
  phases:
  - phase: Delete Application in ArgoCD
    tasks:
    - name: Application Details
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      variables:
      - projectDetails
      - argoCDApiServer
      - Application_name
    - name: Delete Application in ArgoCD
      type: argocd.RemoveApplication
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${Application_name}"
    - name: Delete Application in Release
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.StringVariable
    key: Application_name
    showOnReleaseStart: false
    label: Application Name
    description: Application name to delete from ArgoCD
  - type: xlrelease.StringVariable
    key: projectDetails
    showOnReleaseStart: false
    label: Project Details
    description: Name of the project in ArgoCD where the Application is mapped to
    value: default
  - type: xlrelease.ReferenceVariable
    key: argoCDApiServer
    showOnReleaseStart: false
    label: ArgoCD API server
    description: ArgoCD Api Server connection details
    referencedType: argocd.APIServer
  disableNotifications: true
  scriptUsername: admin
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/01d81f95a92b5ebbae77081f9988c520aa79d73e/argo-icon.png"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
- template: Install Argo Rollouts
  description: Install Argo Rollouts to Kubernetes cluster.
  scheduledStartDate: 2022-12-07T08:00:00Z
  dueDate: 2022-12-07T09:00:00Z
  phases:
  - phase: Check if Argo Rollouts is already installed
    tasks:
    - name: Check if remote runner exists
      type: xlrelease.ScriptTask
      description: "Task checks if there is a remote runner enabled. Also, the enabled\
        \ remote runner needs to have \"remote\" capability."
      script: |-
        def check_runners(runners):
          for runner in runners:
            if runner["enabled"] and "remote" in runner["capabilities"]:
              return True
          return False

        runners = configurationApi.searchByTypeAndTitle("xlrelease.JobRunner", "")

        if not check_runners(runners):
          raise Exception("There is no job runner with 'remote' capability enabled")
    - name: Input for Argo Rollouts installation
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server URL and Kubernetes namespace where
        ArgoCD will be installed.Please enter the required information below.
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if Argo Rollouts namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists. If it exists,\
        \ there will be a check performed if ArgoCD services already exist."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: List all services in Argo Rollouts namespace
      type: kubernetes.ListServices
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task lists all services and after that checks if there are any ArgoCD services.
      precondition: |-
        if releaseVariables['namespaceExistsResponse']['exists'] != 'false':
          result = True
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${allServicesResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Validate that Argo Rollouts services don't exist
      type: xlrelease.ScriptTask
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task checks if there are any Argo Rollouts services in '${namespace}' namespace exist. If there are some, it means that Argo Rollouts is already installed and the release fails.
      precondition: |-
        if releaseVariables['namespaceExistsResponse']['exists'] == 'false':
          result = False
        else:
          result = True
      script: |-
        import json

        services = json.loads(releaseVariables['allServicesResponse']['services'])
        for service in services:
          if service.get('metadata', {}).get('name', '') == "argo-rollouts":
            raise Exception('Argo Rollouts is already installed in namespace ${namespace}')
    color: '#3d6c9e'
  - phase: Install Argo Rollouts
    tasks:
    - name: Create argo-rollouts namespace
      type: kubernetes.CreateNamespace
      description: "Creates '${namespace}' namespace."
      precondition: |-
        import json

        def get_result_from_response(resp):
            if resp.has_key('exists') and resp['exists'] != 'false':
              return False
            else:
              return True

        if releaseVariables.has_key('argoNamespaceExists'):
          result = get_result_from_response(releaseVariables['argoNamespaceExists'])
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Apply Argo Rollouts installation on cluster
      type: kubernetes.Apply
      description: "Applies Argo Rollouts installation YAML on '${namespace}' namespace."
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      yamlLocation: https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
      namespace: argo-rollouts
    - name: Check status of pods in argo-rollouts namespace
      type: kubernetes.CheckPodStatus
      description: Performs check if all Argo Rollouts services are running successfully.
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${checkService}"
      capabilities:
      - remote
      namespace: "${namespace}"
      labelSelector: app.kubernetes.io/name=argo-rollouts
    color: '#3d6c9e'
  - phase: Create Argo Rollouts CI
    tasks:
    - name: Input for Argo Rollouts CI
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      precondition: |-
        if releaseVariables.has_key('checkService'):
          checkService = releaseVariables['checkService']
          if checkService.has_key('allRunning') and checkService['allRunning'] == 'true':
            result = True
          else:
              raise Exception("Argo Rollouts services not running!")
      variables:
      - apiToken
      - usernameRollouts
      - argoRolloutsHost
    - name: Create Argo Rollouts CI
      type: xlrelease.ScriptTask
      script: '# todo implement when argo rollouts plugin is done'
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    description: Kubernetes namespace where Argo Rollouts will be installed
    value: argo-rollouts
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where Argo Rollouts will be installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
    label: namespaceExistsResponse
  - type: xlrelease.StringVariable
    key: argoRolloutsHost
    requiresValue: false
    showOnReleaseStart: false
    label: Argo Rollouts host
  - type: xlrelease.StringVariable
    key: usernameRollouts
    requiresValue: false
    showOnReleaseStart: false
    label: Username
    value: admin
  - type: xlrelease.StringVariable
    key: apiToken
    requiresValue: false
    showOnReleaseStart: false
    label: API token
  - type: xlrelease.MapStringStringVariable
    key: checkService
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: allServicesResponse
    requiresValue: false
    showOnReleaseStart: false
  disableNotifications: true
  scriptUsername: admin
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/ce5e2c55c1d65057d9d445256baef6fceef4e644/argo-icon.png"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
- template: Install ArgoCD
  description: Install ArgoCD on Kubernetes cluster for deploying an Application in
    no time.
  scheduledStartDate: 2022-12-07T08:00:00Z
  dueDate: 2022-12-07T09:00:00Z
  phases:
  - phase: Check if ArgoCD is already installed
    tasks:
    - name: Specify RunAs user
      type: xlrelease.UserInputTask
      description: Specify the Run as user credentials which will be used to run the
        workflow. All automated tasks will be run as this user.
      variables:
      - runAsUsername
      - runAsUserPassword
    - name: Input for ArgoCD installation
      type: xlrelease.UserInputTask
      description: Input for Kubernetes API server URL and Kubernetes namespace where
        ArgoCD will be installed.
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if ArgoCD namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists. If it exists,\
        \ there will be a check performed if ArgoCD services already exist."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${argoCDNamespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: List all services in ArgoCD namespace
      type: kubernetes.ListServices
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task lists all services and after that checks if there are any ArgoCD services.
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] != 'false':
          result = True
        else:
          result = False
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${allServicesResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Validate that ArgoCD services don't exist
      type: xlrelease.ScriptTask
      description: |-
        If '${namespace}' namespace exists, this task will be skipped.
        Task checks if there are any ArgoCD services in '${namespace}' namespace exist. If there are some, it means that ArgoCD is already installed and the release fails.
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] == 'false':
          result = False
        else:
          result = True
      script: |-
        import json

        services = json.loads(releaseVariables['allServicesResponse']['services'])
        for service in services:
          if service.get('metadata', {}).get('name', '') == "argocd-server":
            raise Exception('ArgoCD is already installed in namespace ${namespace}')
    color: '#3d6c9e'
  - phase: Install ArgoCD
    tasks:
    - name: Create ArgoCD namespace
      type: kubernetes.CreateNamespace
      description: "Creates '${namespace}' namespace."
      precondition: |-
        if releaseVariables['argoCDNamespaceExistsResponse']['exists'] != 'false':
          result = False
        else:
          result = True
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    - name: Apply ArgoCD installation on cluster
      type: kubernetes.Apply
      description: "Applies ArgoCD installation YAML on '${namespace}' namespace."
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      yamlLocation: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      namespace: "${namespace}"
    - name: Check status of pods in ArgoCD namespace
      type: kubernetes.CheckPodStatus
      description: Performs check if all ArgoCD services are running successfully.
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${checkServiceResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
      labelSelector: app.kubernetes.io/name=argocd-server
    color: '#3d6c9e'
  - phase: Create CIs for live deployment
    tasks:
    - name: Fetch secret
      type: kubernetes.GetSecret
      description: Fetches initial ArgoCD dashboard admin password.
      precondition: |-
        if releaseVariables['checkServiceResponse']['allRunning'] == 'true':
          result = True
        else:
            raise Exception("ArgoCD services not running!")
      variableMapping:
        secureResponse: "${argoCDSecret}"
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
      secretName: argocd-initial-admin-secret
      dataField: password
    - name: Input for ArgoCD CI
      type: xlrelease.UserInputTask
      description: Input for ArgoCD API server title and host URL for the CI that
        will be created.
      variables:
      - argoCDServerTitle
      - argoCDHost
    - name: Create ArgoCD live deployment CIs
      type: xlrelease.ScriptTask
      description: |-
        Creates ArgoCD API server CI with given title and host.
        Also, authentication is set to basic with admin username and initial password.
        For live deployment, webhook endpoint and event source are created.
      script: |-
        import base64
        import uuid

        from com.xebialabs.deployit.plugin.api.reflect import Type
        from com.xebialabs.deployit.util import PasswordEncrypter

        server = Type.valueOf("argocd.APIServer").getDescriptor().newInstance("argocd-server")

        server.setProperty("folderId", release.findFolderId())
        server.setProperty("title", releaseVariables['argoCDServerTitle'])
        server.setProperty("url", releaseVariables['argoCDHost'])
        server.setProperty("authenticationMethod", "Basic")
        server.setProperty("username", "admin")

        # Set password
        encrypted = releaseVariables["argoCDSecret"]
        enc = PasswordEncrypter.getInstance()
        decrypted = enc.ensureDecrypted(encrypted)
        password = base64.b64decode(decrypted + b'==')
        server.setProperty("password", password)

        # Set default values
        server.setProperty("cardinality", 1)
        server.setProperty("proxyHost", "")
        server.setProperty("proxyPort", "")
        server.setProperty("proxyUsername", "")
        server.setProperty("proxyDomain", "")

        # Add ArgoCD API server
        configurationApi.addConfiguration(server)

        # Add webhook endpoint
        authentication = Type.valueOf("events.NoAuthentication").getDescriptor().newInstance("no-authentication")

        endpoint = Type.valueOf("events.PostWebhookEndpoint").getDescriptor().newInstance("post-webhook-endpoint")
        endpoint.setProperty("folderId", release.findFolderId())
        endpoint.setProperty("title", releaseVariables['argoCDServerTitle'])
        endpoint.setProperty("path", "path-" + str(uuid.uuid4()))
        endpoint.setProperty("authentication", authentication)

        configurationApi.addConfiguration(endpoint)

        # Add event source
        eventSource = Type.valueOf("argocd.StatusWebhookEventSource").getDescriptor().newInstance("status-event-webhook")
        eventSource.setProperty("folderId", release.findFolderId())
        eventSource.setProperty("title", releaseVariables['argoCDServerTitle'])
        eventSource.setProperty("eventSource", endpoint)
        eventSource.setProperty("sourceServer", server)
        eventSource.setProperty("filteredFolders", ["default"])

        configurationApi.addConfiguration(eventSource)
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  - Infrastructure Service
  - Application Life Cycle Management
  variables:
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    description: Kubernetes namespace where ArgoCD will be installed
    value: argocd
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD will be installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.MapStringStringVariable
    key: allServicesResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      services: "[]"
  - type: xlrelease.MapStringStringVariable
    key: argoCDNamespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      exists: "false"
  - type: xlrelease.MapStringStringVariable
    key: checkServiceResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      allRunning: "false"
  - type: xlrelease.StringVariable
    key: argoCDHost
    showOnReleaseStart: false
    label: ArgoCD API Server Host
    description: URL to the base of the API Server
  - type: xlrelease.StringVariable
    key: argoCDServerTitle
    showOnReleaseStart: false
    label: ArgoCD API Server Title
  - type: xlrelease.PasswordStringVariable
    key: argoCDSecret
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: runAsUsername
    showOnReleaseStart: false
    label: Run automated tasks as user
    description: Run all automated tasks in this workflow as user
  - type: xlrelease.PasswordStringVariable
    key: runAsUserPassword
    showOnReleaseStart: false
    label: Password
    description: Password for automated tasks user
  disableNotifications: true
  scriptUsername: "${runAsUsername}"
  variableMapping:
    scriptUserPassword: "${runAsUserPassword}"
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/c9e27d5b1d5ed9738d58781439732acacd6b482d/argo-icon.png"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
- template: Setup ArgoCD application with initial deployment
  description: "Create an application in ArgoCD that can be deployed to Kubernetes\
    \ cluster, with initial deployment"
  scheduledStartDate: 2022-12-13T08:00:00Z
  dueDate: 2022-12-13T09:00:00Z
  phases:
  - phase: Check if application exists
    tasks:
    - name: Specify RunAs user
      type: xlrelease.UserInputTask
      description: Specify the Run as user credentials which will be used to run the
        workflow. All automated tasks will be run as this user.
      variables:
      - runAsUsername
      - runAsUserPassword
    - name: Application input
      type: xlrelease.UserInputTask
      description: Input for application information together with the ArgoCD server
      variables:
      - argoCDApiServer
      - gitRepo
      - path
      - branch
      - clusterUrl
    - name: Check if application exists
      type: argocd.CheckIfApplicationExists
      description: |-
        This is an automated task that checks whether an application already exists on the server based on the details provided.

        If the application does not exist, the task will be completed and the workflow will proceed to the next task.

        However, if the application already exists, the task will fail, and the workflow will be aborted. This is to prevent creating duplicate applications and ensure the proper functioning of the Argo CD Server.
      variableMapping:
        commandResponse: "${applicationExistsResponse}"
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      gitRepo: "${gitRepo}"
      path: "${path}"
      branch: "${branch}"
      clusterUrl: "${clusterUrl}"
    color: '#3d6c9e'
  - phase: Check if namespace exists
    tasks:
    - name: Namespace input
      type: xlrelease.UserInputTask
      description: |-
        This task involves providing the namespace in which the application will be deployed and run from. Additionally, you will need to provide the Kubernetes API server to connect to for deploying and managing the application.

        If you do not provide a namespace, the task will use the default value. Please ensure that the provided namespace is valid and appropriate for your application
      precondition: |-
        import json

        if releaseVariables["applicationExistsResponse"]["exists"] == "true":
          raise Exception("Application app already exists!")

        result = True
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create namespace
    tasks:
    - name: Create namespace
      type: kubernetes.CreateNamespace
      description: "Creates the ${namespace} namespace. If it already exists, this\
        \ task is skipped."
      precondition: |-
        import json

        result = (releaseVariables["namespaceExistsResponse"]["exists"] != "true")
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create ArgoCD application
    tasks:
    - name: Application information input
      type: xlrelease.UserInputTask
      description: Application name and ArgoCD project.
      variables:
      - applicationName
      - projectName
      - environmentTag
      - managedBy
    - name: Create ArgoCD application
      type: argocd.CreateApplication
      description: "Deploys ArgoCD application with given information about application\
        \ name, project, git repo, path and branch."
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      appName: "${applicationName}"
      project: "${projectName}"
      url: "${gitRepo}"
      path: "${path}"
      revision: "${branch}"
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Get application status
    tasks:
    - name: Get application status
      type: argocd.CheckApplicationStatus
      description: Checks if application is successfully deployed.
      variableMapping:
        argoServer: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${applicationName}"
    - name: Create managed application
      type: xlrelease.ScriptTask
      description: Adds the created ArgoCD application to the Digital.ai Release managed
        application list.
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView

        from java.util import Date
        from java.text import SimpleDateFormat

        dateCreated = Date()

        configuration = configurationApi.getConfiguration("${argoCDApiServer}")
        url = configuration["url"]

        connectionServer = ConnectionServerView("${argoCDApiServer}", "server", "argocd.APIServer", url)

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${applicationName}"
        requestBody.managedBy = "${managedBy}"
        requestBody.dateCreated = dateCreated
        requestBody.environmentTag = "${environmentTag}"
        requestBody.applicationReference = "${clusterUrl}"
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.MapStringStringVariable
    key: applicationExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: gitRepo
    showOnReleaseStart: false
    label: Git Repo
    description: Git repository from where application configuration will be fetched
  - type: xlrelease.StringVariable
    key: path
    showOnReleaseStart: false
    label: Path
    description: Path inside git repository where configuration is located
  - type: xlrelease.StringVariable
    key: branch
    showOnReleaseStart: false
    label: Branch
    description: Git branch
    value: HEAD
  - type: xlrelease.StringVariable
    key: clusterUrl
    showOnReleaseStart: false
    label: Cluster url
    description: Kubernetes cluster URL
    value: https://kubernetes.default.svc
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    value: default
  - type: xlrelease.StringVariable
    key: applicationName
    showOnReleaseStart: false
    label: Application name
  - type: xlrelease.StringVariable
    key: projectName
    showOnReleaseStart: false
    label: Project name
    value: default
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD is installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.ReferenceVariable
    key: argoCDApiServer
    showOnReleaseStart: false
    label: ArgoCD API server
    description: ArgoCD API server where application will be deployed
    referencedType: argocd.APIServer
  - type: xlrelease.StringVariable
    key: environmentTag
    showOnReleaseStart: false
    label: Environment tag
    description: Tag of the target environment
    value: PROD
  - type: xlrelease.StringVariable
    key: managedBy
    showOnReleaseStart: false
    label: Managed by
    value: Release
  - type: xlrelease.StringVariable
    key: runAsUsername
    showOnReleaseStart: false
    label: Run automated tasks as user
    description: Run all automated tasks in this workflow as user
  - type: xlrelease.PasswordStringVariable
    key: runAsUserPassword
    showOnReleaseStart: false
    label: Password
    description: Password for automated tasks user
  disableNotifications: true
  scriptUsername: "${runAsUsername}"
  variableMapping:
    scriptUserPassword: "${runAsUserPassword}"
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/3da925ba0f190b8e450edd130822ee9edb822652/argo-icon.png"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
- notifications:
  - notification: TASK_OVERDUE
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is overdue.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Release Admin
    - Task Owner
  - notification: TASK_FLAGGED
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The status of the **${task.title}** task in the **${release.title}** release was changed to **${task.flagStatus}** with the following comment:

      **${release.flagComment}**
    roles:
    - Watcher
    - Release Admin
    - Task Team
  - notification: AUDIT_REPORT_JOB_ABORTED
    priority: Normal
    subject: "[Release] Audit report was aborted"
    body: |-
      **Your audit report was aborted!**

       Please try to generate it again or contact your Release administrator for assistance.
  - notification: MANUAL_TASK_STARTED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has started and is assigned to you or your team.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Task Owner
  - notification: TASK_FAILED
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has failed.

      Other tasks could still be in progress, but the release will stop after they complete.

      You can retry the task, reassign it to somebody else or abort the release.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: USER_MENTIONED
    priority: Normal
    subject: "[Release] ${mentionedByFullName} mentioned you on ${release.title}:\
      \ ${task.title}"
    body: "**${mentionedByFullName}** mentioned you on the **${task.title}** task\
      \ in the **${release.title}** release:"
  - notification: COMMENT_ADDED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      **${comment.authorFullName}** commented on the **${task.title}** task in the **${release.title}** release:

      ${comment.text}
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: AUDIT_REPORT_JOB_FAILED
    priority: Normal
    subject: "[Release] Audit report has failed"
    body: |-
      **Your audit report has failed!**

       Please try to generate it again or contact your Release administrator for assistance.
  - notification: RELEASE_FAILED
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The **${release.title}** release has failed due to a task failure.

      The release is now stopped.

      You can retry the failed task, reassign it to somebody else or abort the release.
    roles:
    - Release Admin
  - notification: TASK_DUE_SOON
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is due in **${task.dueInHours}** hours and **${task.dueInMinutes}** minutes.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Release Admin
    - Task Owner
  - notification: ACTIVE_TASK_UNASSIGNED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is active but not assigned to anyone anymore.

      Please assign the task to a user or a team.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: RELEASE_FAILING
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The **${release.title}** release is failing due to a task failure.

      Other tasks may still be in progress, but the release will stop after they complete.

      You can retry the failed task, reassign it to somebody else or abort the release.
    roles:
    - Release Admin
  - notification: USER_TOKEN_ABOUT_TO_EXPIRE
    priority: Normal
    subject: "[Release] Your personal access token is about to expire"
    body: |-
      Your personal access token "'${token.tokenNote}'" will expire in about ${token.expirationDurationInHours} hours.

       If this token is still needed, visit [Access tokens](${url}#/personal-access-token) to generate an equivalent.
  - notification: RELEASE_FLAGGED
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The status of the **${release.title}** release was changed to **${release.flagStatus}** with the following comment:

      **${release.flagComment}**
    roles:
    - Release Admin
  - notification: MANUAL_TASK_STARTED_WITHOUT_OWNER
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has started, but it is not assigned.

      Please assign the task to a user or a team.
    roles:
    - Watcher
    - Release Admin
  - notification: RELEASE_COMPLETED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been completed."
    roles:
    - Release Admin
  - notification: TASK_WAITING_FOR_INPUT
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release needs your input.

      Please enter the required information so the release can continue.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: AUDIT_REPORT_JOB_COMPLETED
    priority: Normal
    subject: "[Release] Report '${report.reportName}' is ready"
    body: |-
      **Your audit report is complete!**

       '${report.reportName}' is ready for download.
  - notification: GENERIC_SYSTEM_NOTIFICATION
    priority: Normal
    subject: "${notification.subject}"
    body: "${notification.body}"
  - notification: RELEASE_STARTED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been started."
    bulkSubject: "[Release] Multiple releases started"
    bulkBody: |-
      The following releases have been started:

      ${#releases}
      * [${title}](${url})
      ${/releases}
    roles:
    - Release Admin
  - notification: RELEASE_ABORTED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been aborted."
    bulkSubject: "[Release] Multiple releases aborted"
    bulkBody: |-
      The following releases have been aborted:

      ${#releases}
      * [${title}](${url})
      ${/releases}
    roles:
    - Release Admin
  - notification: ACTIVE_TASK_ASSIGNED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: "The active task **${task.title}** in the **${release.title}** release is\
      \ now assigned to ${task.ownerFullName}."
    roles:
    - Watcher
    - Task Team
    - Task Owner
