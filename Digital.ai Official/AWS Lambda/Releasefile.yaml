# Exported from:        http://host.docker.internal:5516/
# Release version:      23.1.0-rc.3
# Date created:         Wed May 17 10:17:30 UTC 2023

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: workflow
spec:
- template: AWS Lambda application setup with Digital.ai Deploy
  description: "Easily create an application in Digital.ai Deploy that can be deployed\
    \ to AWS Lambda, including its respective environment and infrastructure setup."
  scheduledStartDate: 2023-03-23T03:30:00Z
  dueDate: 2023-03-23T04:30:00Z
  phases:
  - phase: Setup Infra and Env
    tasks:
    - name: Specify Deploy Server Connection
      type: xlrelease.UserInputTask
      description: Select the Deploy Server Connection onto which the AWS Lambda application
        has to be created. You can create a new connection if you have not created
        one.
      owner: admin
      variables:
      - deploy-server
    - name: Specify Environment Name
      type: xlrelease.UserInputTask
      description: Specify a name for the environment CI that should be created for
        AWS in Digital.ai Deploy server.
      owner: admin
      variables:
      - environment-name
    - name: Create Environment
      type: deploy.CreateCI
      description: Creates an Environment CI in Digital.ai Server.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Environments/${environment-name}"
      ciType: udm.Environment
      jsonDescriptor: "{}"
    - name: Specify AWS Connection Parameters
      type: xlrelease.UserInputTask
      description: Specify the access key and secret of your AWS account.
      owner: admin
      variables:
      - awscloud-identifier
      - access-key
      - access-secret
    - name: Configure AWS Cloud Connection
      type: deploy.CreateCI
      description: Creates an AWS Cloud CI in Digital.ai Server with the credentials
        specified in the previous task.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Infrastructure/${awscloud-identifier}"
      ciType: aws.Cloud
      jsonDescriptor: |-
        {
            "accesskey":"${access-key}",
            "accessSecret":"${access-secret}"
        }
      addToEnvironment: true
      envID: "Environments/${environment-name}"
    - name: Check AWS Connection
      type: deploy.ControlTask
      description: Checks if the specified AWS credentials are valid by running the
        Check Connection control task on the created AWS Cloud CI.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciId: "Infrastructure/${awscloud-identifier}"
      taskName: checkConnection
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
    color: '#3d6c9e'
  - phase: Setup Application
    tasks:
    - name: Specify Application Name
      type: xlrelease.UserInputTask
      description: Specify a name  for the application CI that should be created in
        Digital.ai Deploy server.
      owner: admin
      variables:
      - application-name
    - name: Create Application
      type: deploy.CreateCI
      description: Creates an application in Digital.ai Deploy.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}"
      ciType: udm.Application
      jsonDescriptor: "{}"
    - name: Specify Package Name
      type: xlrelease.UserInputTask
      description: Specify a name for the application deployment package that should
        be created in Digital.ai Deploy server.
      owner: admin
      variables:
      - package-name
    - name: Create Deployment Package
      type: deploy.CreateCI
      description: Creates an Deployment Package in the Digital.ai Server application
        created in the previous step.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}/${package-name}"
      ciType: udm.DeploymentPackage
      jsonDescriptor: "{}"
    - name: Specify S3Lambda Parameters
      type: xlrelease.UserInputTask
      description: Specify the inputs for the lambda function to be created in the
        Digital.ai Deploy server.
      owner: admin
      variables:
      - functionName
      - bucketName
      - s3Key
      - region
      - runtime
      - role
      - handler
    - name: Create Sample Lambda Deployment from S3
      type: deploy.CreateCI
      description: Creates a lambda deployable CI with the details given in the previous
        step.
      owner: admin
      variableMapping:
        server: "${deploy-server}"
      capabilities:
      - remote
      ciID: "Applications/${application-name}/${package-name}/sample-lambda"
      ciType: aws.lambda.S3Spec
      jsonDescriptor: |-
        {
            "functionName":"${functionName}",
            "bucketName":"${bucketName}",
            "s3Key":"${s3Key}",
            "region":"${region} ",
            "runtime":"${runtime} ",
            "role":"${role} ",
            "handler":"${handler} "
        }
    - name: Add Managed Application
      type: xlrelease.ScriptTask
      description: Adds the lambda application created to the Release Managed Application
        view.
      owner: admin
      script: |-
        from com.xebialabs.xlrelease.api.v1.views import ManagedApplicationView
        from com.xebialabs.xlrelease.api.v1.views import ConnectionServerView
        from java.util import Date
        from java.text import SimpleDateFormat
        import datetime

        parsedDate = datetime.datetime.now()

        requestBody = ManagedApplicationView()
        requestBody.applicationName = "${application-name}"
        requestBody.managedBy = "Digital.ai Deploy"
        requestBody.dateCreated = parsedDate
        requestBody.environmentTag = "${environment-name}"
        requestBody.applicationReference = "${application-name}"

        connectionServer = ConnectionServerView('${deploy-server}', '', '', '')
        requestBody.connectionServer = connectionServer

        res = managedApplicationApi.addManagedApplication(requestBody)
    color: '#3d6c9e'
  tags:
  - app-pipeline-templates
  variables:
  - type: xlrelease.StringVariable
    key: environment-name
    value: aws-env
  - type: xlrelease.StringVariable
    key: awscloud-identifier
    value: aws-cloud
  - type: xlrelease.StringVariable
    key: application-name
    value: aws-app
  - type: xlrelease.StringVariable
    key: package-name
    value: "1.0"
  - type: xlrelease.StringVariable
    key: functionName
    value: functionName
  - type: xlrelease.StringVariable
    key: bucketName
    value: bucketName
  - type: xlrelease.StringVariable
    key: s3Key
    value: s3Key
  - type: xlrelease.StringVariable
    key: region
    value: region
  - type: xlrelease.StringVariable
    key: runtime
    value: runtime
  - type: xlrelease.StringVariable
    key: role
    value: role
  - type: xlrelease.StringVariable
    key: handler
    value: handler
  - type: xlrelease.StringVariable
    key: applicationReference
    value: applicationReference
  - type: xlrelease.StringVariable
    key: connectionServer
    value: connectionServer
  - type: xlrelease.StringVariable
    key: environmentTag
    value: environmentTag
  - type: xlrelease.StringVariable
    key: managedBy
    value: managedBy
  - type: xlrelease.StringVariable
    key: access-key
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: access-secret
    showOnReleaseStart: false
  - type: xlrelease.ReferenceVariable
    key: deploy-server
    showOnReleaseStart: false
    label: Deploy Server
    referencedType: digitalai.DeployServer
  scriptUsername: admin
  riskProfile: Default risk profile
